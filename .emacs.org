#+TITLE: LAEMACS (emacs configurations file)
#+AUTHOR: Andre Rosendo
#+EMAIL: andre.rosendo@hotmail.com


* Package
  Added by Package.el.  This must come before configurations of
  installed packages.  Don't delete this line.  If you don't want it,
  just comment it out by adding a semicolon to the start of the line.
  You may delete these explanatory comments.
  #+BEGIN_SRC emacs-lisp
(require 'package)
(package-initialize)
  #+END_SRC


* Package archives
  Extra archives where emacs can search for extensions
  #+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  #+END_SRC


* Automatic Installation of Packages
** Check if packages are installed
   If packages aren't installed:
   - Refrash package repos (only does it once)
   - Install the package
   #+BEGIN_SRC emacs-lisp
     (defun ensure-package-installed (&rest packages)
       "Assure every package is installed, ask for installation if itâ€™s not.
        Return a list of installed packages or nil for every skipped package."
       (mapcar
        (lambda (package)
          (let ((refresh nil))
            (unless (package-installed-p package)
              (if refresh
                  (package-install package)
                (progn
                  (package-refresh-contents)
                  (setq refresh t)
                  (package-install package))))))
        packages)
       )
   #+END_SRC
**  Packages to install
   #+BEGIN_SRC emacs-lisp
 (ensure-package-installed
  'use-package
  'mic-paren
  'solarized-theme
  'org
  'evil
  'evil-surround
  'magit
  'evil-magit
  'ox-reveal
  'lsp-mode
  'lsp-java
  'projectile
  'yasnippet
  'company-lsp
  'treemacs
  'flycheck
  'treemacs-evil
  'auto-complete
  'helm
 )
   #+END_SRC


* Use Package
  #+BEGIN_SRC emacs-lisp
(require 'use-package)
  #+END_SRC


* Theme
  #+BEGIN_SRC emacs-lisp
(load-theme 'solarized-dark t)
  #+END_SRC


*  Pcre2el

  #+BEGIN_SRC emacs-lisp
(use-package pcre2el
:ensure t
:config (pcre-mode))
  #+END_SRC


*  Mic Paren
  #+BEGIN_SRC emacs-lisp
(paren-activate)
(setq paren-dont-touch-blink t)
(setq paren-highlight-offscreen t)
(setq paren-match-face 'highlight)
(setq paren-sexp-mode t)
  #+END_SRC


* Ido mode
  #+BEGIN_SRC emacs-lisp
(setq indo-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
  #+END_SRC



* Evil
  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :init
      (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
      (setq evil-want-keybinding nil)
      :ensure t
      :config
      (evil-mode 1))

    (use-package evil-collection
      :after evil
      :ensure t
      :config
      (evil-collection-init))

    (use-package evil-surround
      :ensure t
      :config
      (global-evil-surround-mode 1))

    (use-package evil-magit
      :ensure t)

  #+END_SRC


* Reveal

  #+BEGIN_SRC emacs-lisp
(use-package ox-reveal
  :ensure t
  :config
  (setq org-reveal-root (concat "file:///" (expand-file-name "reveal.js" user-emacs-directory))))
  #+END_SRC


* Remember
  #+BEGIN_SRC emacs-lisp
    (use-package remember
    :ensure t)
  #+END_SRC


* Display Relative Line Number
  Display line numbers in visual mode (counts collapsed lines as just one line).
  Displays the lines globally
  #+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'visual)
(global-display-line-numbers-mode)
  #+END_SRC


* Org Mode configurations
  #+BEGIN_SRC emacs-lisp
    (use-package org
                 :ensure t
                 :config
                 (setq initial-major-mode 'org-mode)
                 (setq org-hide-leading-stars t)
                 (setq org-default-notes-file (concat org-directory "/notes.org"))
                 (setq org-todo-keywords
                       '((sequence "TODO" "|" "DONE")
                         (sequence "DEV" "TI" "CQ" "|" "PRD")))
                 (setq org-todo-keyword-faces
                       '(("TODO" . org-warning)
                         ("DONE" . org-done)
                         ("DEV" . "green")
                         ("TI" . "green")
                         ("CQ" . "yellow")
                         ("PRD" . "red")))
                 (setq org-pretty-entities t))
  #+END_SRC


* Ibuffer
  #+BEGIN_SRC emacs-lisp
;;(defalias 'list-buffers 'ibuffer)
  #+END_SRC


* Interface Tweaks

  #+BEGIN_SRC emacs-lisp
 (global-visual-line-mode t)
 (setq inhibit-startup-screen t)
 (setq initial-buffer-choice 'remember-notes)
 (menu-bar-mode -1)
 (tool-bar-mode -1)
 (scroll-bar-mode -1)
 (toggle-frame-maximized)
  #+END_SRC


* Global Key Mappings
  #+BEGIN_SRC emacs-lisp
(define-key global-map "\C-cc" 'org-capture)
  #+END_SRC


* Lsp mode
  #+BEGIN_SRC emacs-lisp
(require 'cc-mode)
(setq lsp-prefer-flymake nil)
(use-package projectile :ensure t)
(use-package yasnippet :ensure t
:config (setq yas-global-mode 1)
)
(use-package lsp-mode :ensure t
:config (setq lsp-auto-configure t)
(setq lsp-enable-indentation t)
(setq lsp-enable-on-type-formatting t)
)
(use-package hydra :ensure t)
(use-package company-lsp :ensure t
  :config (push 'company-lsp company-backends)
  (setq company-lsp-enable-snippet nil)
  (setq company-lsp-enable-recompletion nil)
(setq company-lsp-async t)
)
(use-package lsp-ui :ensure t
:config (add-hook 'lsp-mode 'lsp-ui)

)
(use-package lsp-java :ensure t :after lsp
  :config (add-hook 'java-mode-hook 'lsp))

(use-package company
  :config
  (setq company-tooltip-limit 10
	company-idle-delay 0.05
	company-minimum-prefix-length 2
	company-show-numbers t
	company-tooltip-align-annotations t))
(use-package dap-mode
  :ensure t :after lsp-mode
  :config
  (dap-mode t)
  (dap-ui-mode t)
(tooltip-mode 1)
(require 'dap-java))

(use-package dap-java :after (lsp-java))

(add-hook 'java-mode-hook 'flycheck-mode)

  #+END_SRC


* Treemacs

  #+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             0.2
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-asc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-width                         35)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
                 (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after treemacs evil
  :ensure t)

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)

(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :ensure t)
  #+END_SRC


* Tabs are spaces
  #+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  #+END_SRC


* Whitespace mode
  #+BEGIN_SRC emacs-lisp
(setq whitespace-style '(face trailing tabs  lines-tail empty space-after-tab space-before-tab))
  (global-whitespace-mode 1)
  #+END_SRC


* Auto Complete

  #+BEGIN_SRC emacs-lisp
;;  (use-package auto-complete
;;  :config
;; (global-auto-complete-mode t)
;; (ac-config-default))
  #+END_SRC


* Flyspell
  #+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
  #+END_SRC


* Helm
  #+BEGIN_SRC emacs-lisp
;;  (use-package helm :ensure t
;;  :config (require 'helm-config))
  #+END_SRC
